package com.hardware.persistence.impl;

import com.hardware.domain.catalog.Device;
import com.hardware.domain.catalog.Page;
import com.hardware.domain.catalog.exceptions.NotFoundException;
import com.hardware.persistence.api.DeviceDAO;
import com.hardware.persistence.impl.converters.AutoGeneratedDeviceToEntityConverter;
import com.hardware.persistence.impl.converters.DeviceToEntityConverter;
import com.hardware.persistence.impl.converters.EntityToDeviceConverter;
import com.hardware.persistence.impl.entities.AbstractDeviceEntity;
import com.hardware.persistence.impl.entities.DeviceEntity;
import com.hardware.persistence.impl.repositories.AutoGeneratedDeviceRepository;
import com.hardware.persistence.impl.repositories.DeviceRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@Service
public class DeviceDAOImpl implements DeviceDAO {

    private final DeviceRepository deviceRepository;

    private final AutoGeneratedDeviceRepository autoGeneratedDeviceRepository;

    private final DeviceToEntityConverter deviceToEntityConverter;

    private final AutoGeneratedDeviceToEntityConverter autoGeneratedDeviceToEntityConverter;

    private final EntityToDeviceConverter entityToDeviceConverter;

    @Override
    public Device create(Device device) {

        AbstractDeviceEntity savedEntity;
        if (device.getId() != null) {
            savedEntity = deviceRepository.save(deviceToEntityConverter.convert(device));
        } else {
            savedEntity = autoGeneratedDeviceRepository.save(autoGeneratedDeviceToEntityConverter.convert(device));
        }
        return entityToDeviceConverter.convert(savedEntity);
    }

    @Override
    public Optional<Device> findById(long id) {

        return deviceRepository.findById(id)
                .map(entityToDeviceConverter::convert);
    }

    @Override
    public List<Device> findAll(Page page, String brand) {

        Specification<DeviceEntity> brandSpecification = null;

        if (!StringUtils.isEmpty(brand)) {
            brandSpecification = (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.equal(root.get("brand"), brand);
        }

        return deviceRepository.findAll(brandSpecification,
                                        PageRequest.of(page.getPageNumber(), page.getSize()))
                .map(entityToDeviceConverter::convert)
                .toList();
    }

    @Override
    public void delete(long id) {

        try {
            deviceRepository.deleteById(id);
        } catch (EmptyResultDataAccessException e) {
            throw NotFoundException.deviceNotFoundException();
        }
    }

    @Override
    public Device update(Device device) {

        return deviceRepository.findById(device.getId())
                .map(deviceEntity -> updateInternal(deviceEntity, device.getBrand(), device.getName()))
                .map(deviceRepository::save)
                .map(entityToDeviceConverter::convert)
                .orElseThrow(NotFoundException::deviceNotFoundException);
    }

    private DeviceEntity updateInternal(DeviceEntity deviceEntity, String brand, String name) {

        deviceEntity.setBrand(brand);
        deviceEntity.setName(name);

        return deviceEntity;
    }

}
